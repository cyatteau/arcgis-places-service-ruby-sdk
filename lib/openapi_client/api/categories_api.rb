=begin
#ArcGIS places service

## ArcGIS places service  The places service can search for businesses, points of interest (POI), and popular geographic features near a location or within a bounding box.  You can use the service to:  * Find and display places on a map.  * Search for places by text and/or categories such as restaurants, gas stations, or schools.  * Find places near a location and display information such as place name, description, address, user ratings, store hours, and contact information.  * Find places within a bounding box (extent).  * Search for over 1,000 categories using the API or the [category browser](https://developers.arcgis.com/documentation/mapping-apis-and-services/places/places-category-finder/).   **Additional documentation**: To access the service with different client APIs, go to [Places](https://developers.arcgis.com/documentation/mapping-apis-and-services/places/) in the _Mapping APIs and location services_ guide.  ## Supported Operations  ### /categories  The `places/categories` endpoint returns the full list of categories supported by the service. There are over 1000 categories organized into a hierarchy. For example, a place that is in the category of \"French Restaurant\", can also be found through the parent category \"Restaurant\", which is also included in \"Dining and Drinking\".   If you want to view a specific subset of categories, you can supply a filter parameter to return a reduced list of categories which match your filter.  ### /categories/{categoryId}  The `/categories/{categoryId}` endpoint looks up details of a specific category using its ID and returns all the categories to which it belongs and the parent category ID.  ### places/near-point  The `places/near-point` endpoint returns places that are within a search distance of a geographic point. You can also supply additional search criteria, including:  - Search text, such as the place name, or partial name.   - The categories of places (for example, coffee shops or museums).  ### places/within-extent  The `places/within-extent` endpoint returns candidate places that are within an extent (or bounding box). You can also supply additional search criteria, including:  - Search text, such as the place name, or partial name.   - The categories of places (for example, coffee shops or museums).  ### places/{placeId} The `places/{placeId}` endpoint returns detailed information about a given place, including:  - Contact information.  - Address.  - Opening hours.  - Overall price.  - User rating.  ## Workflows  ### Local search In a local search application, follow these steps:  1. Make a `places/categories` request to get information about all available categories.  2. Let users select the categories they want. You will need the category Ids when searching for places. For example, if the target category is \"Bicycle Store\", the category Id is `17119`. Note that if you already know the category Id you are interested in, you can skip steps 1 and 2.  3. Pass the user's search location and a search distance, along with optional search criteria such as category, to `places/near-point` endpoint.  4. Present the user with the filtered places and let them choose those they want to see in more detail. You will need the `placeId` to fetch additional details.  5. Pass the `placeId` to `places/{placeId}` endpoint to get details for a specific place.   ## Units  - Geographic coordinates are in WGS84 decimal degrees, x is a longitude and y is a latitude. - Distances are in meters. 

The version of the OpenAPI document: 1.1.6

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module OpenapiClient
  class CategoriesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the category details for a category ID.
    # The `/categories/{categoryId}` request returns all the groups to which the category belongs. You must supply a `category ID` to use this request.  **Note**: Query parameters are case-sensitive. 
    # @param category_id [String] The ID of the category that you want to fetch details for.  For example, using a category ID of &#x60;13035&#x60; would fetch details about the \&quot;Coffee Shop\&quot; category. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :f The requested response format - either &#x60;json&#x60; or &#x60;pjson&#x60; (pretty json).  (default to 'json')
    # @option opts [String] :token The authentication token with the &#x60;premium:user:places&#x60; [privilege](https://developers.arcgis.com/rest/users-groups-and-items/privileges.htm), used to access the Places service.  The &#x60;token&#x60; parameter can be either an API Key or short-lived token. See [ArcGIS security documentation](https://developers.arcgis.com/documentation/mapping-apis-and-services/security/) for more information on authenticating with a token or API key.  Alternatively, you can supply a token in the request header with one of the following keys using the \&quot;Bearer\&quot; scheme:  - &#x60;Authorization: Bearer &lt;YOUR_TOKEN&gt;&#x60; - &#x60;X-Esri-Authorization: Bearer &lt;YOUR_TOKEN&gt;&#x60; 
    # @return [CategoryDetails]
    def categories_category_id_get(category_id, opts = {})
      data, _status_code, _headers = categories_category_id_get_with_http_info(category_id, opts)
      data
    end

    # Get the category details for a category ID.
    # The &#x60;/categories/{categoryId}&#x60; request returns all the groups to which the category belongs. You must supply a &#x60;category ID&#x60; to use this request.  **Note**: Query parameters are case-sensitive. 
    # @param category_id [String] The ID of the category that you want to fetch details for.  For example, using a category ID of &#x60;13035&#x60; would fetch details about the \&quot;Coffee Shop\&quot; category. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :f The requested response format - either &#x60;json&#x60; or &#x60;pjson&#x60; (pretty json).  (default to 'json')
    # @option opts [String] :token The authentication token with the &#x60;premium:user:places&#x60; [privilege](https://developers.arcgis.com/rest/users-groups-and-items/privileges.htm), used to access the Places service.  The &#x60;token&#x60; parameter can be either an API Key or short-lived token. See [ArcGIS security documentation](https://developers.arcgis.com/documentation/mapping-apis-and-services/security/) for more information on authenticating with a token or API key.  Alternatively, you can supply a token in the request header with one of the following keys using the \&quot;Bearer\&quot; scheme:  - &#x60;Authorization: Bearer &lt;YOUR_TOKEN&gt;&#x60; - &#x60;X-Esri-Authorization: Bearer &lt;YOUR_TOKEN&gt;&#x60; 
    # @return [Array<(CategoryDetails, Integer, Hash)>] CategoryDetails data, response status code and response headers
    def categories_category_id_get_with_http_info(category_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoriesApi.categories_category_id_get ...'
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling CategoriesApi.categories_category_id_get"
      end
      pattern = Regexp.new(/^\d{1,5}$/)
      if @api_client.config.client_side_validation && category_id !~ pattern
        fail ArgumentError, "invalid value for 'category_id' when calling CategoriesApi.categories_category_id_get, must conform to the pattern #{pattern}."
      end

      allowable_values = ["json", "pjson"]
      if @api_client.config.client_side_validation && opts[:'f'] && !allowable_values.include?(opts[:'f'])
        fail ArgumentError, "invalid value for \"f\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/categories/{categoryId}'.sub('{' + 'categoryId' + '}', CGI.escape(category_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'f'] = opts[:'f'] if !opts[:'f'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ArcGISXEsriAuthorizationHeader', 'ArcGISAuthorizationHeader', 'ArcGISTokenParameter']

      new_options = opts.merge(
        :operation => :"CategoriesApi.categories_category_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoriesApi#categories_category_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return the name and category ID of all categories, or categories which satisfy a filter.
    # A category describes a type of place, such as \"movie theater\" or \"zoo\".  The places service has over 1,000 categories (or types) of place. The  categories fall into ten general groups: Arts and Entertainment, Business  and Professional Services, Community and Government, Dining and Drinking,  Events, Health and Medicine, Landmarks and Outdoors, Retail, Sports and  Recreation, and Travel and Transportation.  The categories are organized into a hierarchical system where a general category contains many more detailed variations on the parent category. For example: \"Travel and Transportation\" (Level 1), \"Transport Hub\" (Level 2), \"Airport\" (Level  3) and \"Airport Terminal\" (Level 4). The hierarchy has up to 5 levels of categories.  The table below shows the top-level of categories, along with a selection of level two categories.  The `/categories` endpoint fetches the latest set of place categories. The request returns all categories including their label and `categoryId`. You should use this endpoint to fetch the latest set of categories when your app starts up. Each category contains an unique ID that you can use to perform a `near-point` or `within-extent` search.  You can also reduce the list to a subset of categories using the `filter` parameter. For example, searching for \"coffee\" would return categories including:  - \"Coffee Shop\"  - \"Coffee Roaster\"  - \"Turkish Coffeehouse\"  |Category Label | Category ID | Level 2| |--- | --- | ---| |Arts and Entertainment | 10000 | Amusement Park (10001), Art Gallery (10004), Casino (10008), Exhibit (10016), Movie Theater (10024), Museum (10027), Stadium (10051), Water Park (10055), Zoo (10056), ...| |Business and Professional Services | 11000 | Construction (11028), Convention Center (11029), Food and Beverage Service (11056), Health and Beauty Service (11061), Industrial Estate (11106), Office (11124), ...| |Community and Government | 12000 | Education (12009), Organization (12082), Government Building (12064), Community Center (12004), Library (12080), Utility Company (12115), ...| |Dining and Drinking | 13000 | Bakery (13002), Bar (13003), Cafe, Coffee, and Tea House (13032), Restaurant (13065, ...| |Event | 14000 |  Conference (14001), Convention (14002), Entertainment Event (14003), Marketplace (14009), ...| |Health and Medicine | 15000 | Dentist (15007), Emergency Service (15008), Hospital (15014), Medical Center (15016), Optometrist (15024), Physician (15027), Veterinarian (15054), ...| |Landmarks and Outdoors | 16000 | Beach (16003), Structure (16007), Campground (16008), Harbor or Marina (16018), Historic and Protected Site (16020), Monument (16026), Nature Preserve (16028), Park (16032), ...| |Retail | 17000 | Arts and Crafts Store (17003), Bookstore (17018), Convenience Store (17029), Department Store (17033)| |Sports and Recreation | 18000 | Athletic Field (18001), Baseball (18002), Basketball (18006), Football (18013), Golf (18016), Gym and Studio (18021), ...| |Travel and Transportation | 19000 | Bike Rental (19002), Cruise (19005), Electric Vehicle Charging Station (19006), Fuel Station (19007), Lodging (19009), Transport Hub (19030), ...|  **Note**: Category details are subject to change as new types of places are introduced.  **Note**: Query parameters are case-sensitive. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter A text filter that will be used for searching categories.   The text must be at least three characters and will be applied as a partial match. For example, using the filter \&quot;off\&quot; would return categories using the word \&quot;Office\&quot; as well as those using the word \&quot;Coffee\&quot;. 
    # @option opts [String] :f The requested response format - either &#x60;json&#x60; or &#x60;pjson&#x60; (pretty json).  (default to 'json')
    # @option opts [String] :token The authentication token with the &#x60;premium:user:places&#x60; [privilege](https://developers.arcgis.com/rest/users-groups-and-items/privileges.htm), used to access the Places service.  The &#x60;token&#x60; parameter can be either an API Key or short-lived token. See [ArcGIS security documentation](https://developers.arcgis.com/documentation/mapping-apis-and-services/security/) for more information on authenticating with a token or API key.  Alternatively, you can supply a token in the request header with one of the following keys using the \&quot;Bearer\&quot; scheme:  - &#x60;Authorization: Bearer &lt;YOUR_TOKEN&gt;&#x60; - &#x60;X-Esri-Authorization: Bearer &lt;YOUR_TOKEN&gt;&#x60; 
    # @return [CategoriesGet200Response]
    def categories_get(opts = {})
      data, _status_code, _headers = categories_get_with_http_info(opts)
      data
    end

    # Return the name and category ID of all categories, or categories which satisfy a filter.
    # A category describes a type of place, such as \&quot;movie theater\&quot; or \&quot;zoo\&quot;.  The places service has over 1,000 categories (or types) of place. The  categories fall into ten general groups: Arts and Entertainment, Business  and Professional Services, Community and Government, Dining and Drinking,  Events, Health and Medicine, Landmarks and Outdoors, Retail, Sports and  Recreation, and Travel and Transportation.  The categories are organized into a hierarchical system where a general category contains many more detailed variations on the parent category. For example: \&quot;Travel and Transportation\&quot; (Level 1), \&quot;Transport Hub\&quot; (Level 2), \&quot;Airport\&quot; (Level  3) and \&quot;Airport Terminal\&quot; (Level 4). The hierarchy has up to 5 levels of categories.  The table below shows the top-level of categories, along with a selection of level two categories.  The &#x60;/categories&#x60; endpoint fetches the latest set of place categories. The request returns all categories including their label and &#x60;categoryId&#x60;. You should use this endpoint to fetch the latest set of categories when your app starts up. Each category contains an unique ID that you can use to perform a &#x60;near-point&#x60; or &#x60;within-extent&#x60; search.  You can also reduce the list to a subset of categories using the &#x60;filter&#x60; parameter. For example, searching for \&quot;coffee\&quot; would return categories including:  - \&quot;Coffee Shop\&quot;  - \&quot;Coffee Roaster\&quot;  - \&quot;Turkish Coffeehouse\&quot;  |Category Label | Category ID | Level 2| |--- | --- | ---| |Arts and Entertainment | 10000 | Amusement Park (10001), Art Gallery (10004), Casino (10008), Exhibit (10016), Movie Theater (10024), Museum (10027), Stadium (10051), Water Park (10055), Zoo (10056), ...| |Business and Professional Services | 11000 | Construction (11028), Convention Center (11029), Food and Beverage Service (11056), Health and Beauty Service (11061), Industrial Estate (11106), Office (11124), ...| |Community and Government | 12000 | Education (12009), Organization (12082), Government Building (12064), Community Center (12004), Library (12080), Utility Company (12115), ...| |Dining and Drinking | 13000 | Bakery (13002), Bar (13003), Cafe, Coffee, and Tea House (13032), Restaurant (13065, ...| |Event | 14000 |  Conference (14001), Convention (14002), Entertainment Event (14003), Marketplace (14009), ...| |Health and Medicine | 15000 | Dentist (15007), Emergency Service (15008), Hospital (15014), Medical Center (15016), Optometrist (15024), Physician (15027), Veterinarian (15054), ...| |Landmarks and Outdoors | 16000 | Beach (16003), Structure (16007), Campground (16008), Harbor or Marina (16018), Historic and Protected Site (16020), Monument (16026), Nature Preserve (16028), Park (16032), ...| |Retail | 17000 | Arts and Crafts Store (17003), Bookstore (17018), Convenience Store (17029), Department Store (17033)| |Sports and Recreation | 18000 | Athletic Field (18001), Baseball (18002), Basketball (18006), Football (18013), Golf (18016), Gym and Studio (18021), ...| |Travel and Transportation | 19000 | Bike Rental (19002), Cruise (19005), Electric Vehicle Charging Station (19006), Fuel Station (19007), Lodging (19009), Transport Hub (19030), ...|  **Note**: Category details are subject to change as new types of places are introduced.  **Note**: Query parameters are case-sensitive. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter A text filter that will be used for searching categories.   The text must be at least three characters and will be applied as a partial match. For example, using the filter \&quot;off\&quot; would return categories using the word \&quot;Office\&quot; as well as those using the word \&quot;Coffee\&quot;. 
    # @option opts [String] :f The requested response format - either &#x60;json&#x60; or &#x60;pjson&#x60; (pretty json).  (default to 'json')
    # @option opts [String] :token The authentication token with the &#x60;premium:user:places&#x60; [privilege](https://developers.arcgis.com/rest/users-groups-and-items/privileges.htm), used to access the Places service.  The &#x60;token&#x60; parameter can be either an API Key or short-lived token. See [ArcGIS security documentation](https://developers.arcgis.com/documentation/mapping-apis-and-services/security/) for more information on authenticating with a token or API key.  Alternatively, you can supply a token in the request header with one of the following keys using the \&quot;Bearer\&quot; scheme:  - &#x60;Authorization: Bearer &lt;YOUR_TOKEN&gt;&#x60; - &#x60;X-Esri-Authorization: Bearer &lt;YOUR_TOKEN&gt;&#x60; 
    # @return [Array<(CategoriesGet200Response, Integer, Hash)>] CategoriesGet200Response data, response status code and response headers
    def categories_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoriesApi.categories_get ...'
      end
      if @api_client.config.client_side_validation && !opts[:'filter'].nil? && opts[:'filter'].to_s.length > 255
        fail ArgumentError, 'invalid value for "opts[:"filter"]" when calling CategoriesApi.categories_get, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && !opts[:'filter'].nil? && opts[:'filter'].to_s.length < 3
        fail ArgumentError, 'invalid value for "opts[:"filter"]" when calling CategoriesApi.categories_get, the character length must be great than or equal to 3.'
      end

      allowable_values = ["json", "pjson"]
      if @api_client.config.client_side_validation && opts[:'f'] && !allowable_values.include?(opts[:'f'])
        fail ArgumentError, "invalid value for \"f\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/categories'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'f'] = opts[:'f'] if !opts[:'f'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CategoriesGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ArcGISXEsriAuthorizationHeader', 'ArcGISAuthorizationHeader', 'ArcGISTokenParameter']

      new_options = opts.merge(
        :operation => :"CategoriesApi.categories_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoriesApi#categories_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
